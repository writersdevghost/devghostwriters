import { useState, useRef, useEffect } from "react";
import {
  Code,
  FileX,
  ArrowRightLeft,
  FileText,
  Clipboard,
  Loader2,
} from "lucide-react";

export default function Demo() {
  const [activeTab, setActiveTab] = useState("snippetGenerator");
  const [language, setLanguage] = useState("javascript");
  const [targetLanguage, setTargetLanguage] = useState("javascript");
  const [result, setResult] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [isMobile, setIsMobile] = useState(false);
  const [copySuccess, setCopySuccess] = useState(false);

  const snippetTextareaRef = useRef(null);
  const bugFixTextareaRef = useRef(null);
  const explainTextareaRef = useRef(null);
  const convertTextareaRef = useRef(null);

  const languages = [
    "javascript",
    "typescript",
    "python",
    "java",
    "c#",
    "php",
    "ruby",
    "go",
    "rust",
    "html",
    "css",
  ];

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };

    checkMobile();
    window.addEventListener("resize", checkMobile);
    return () => window.removeEventListener("resize", checkMobile);
  }, []);

  const processWithAPI = async (action) => {
    setIsLoading(true);
    setError(null);
    setCopySuccess(false);

    try {
      let currentValue = "";

      if (action === "generate") {
        currentValue = snippetTextareaRef.current.value;
      } else if (action === "fix") {
        currentValue = bugFixTextareaRef.current.value;
      } else if (action === "explain") {
        currentValue = explainTextareaRef.current.value;
      } else if (action === "convert") {
        currentValue = convertTextareaRef.current.value;
      }

      let prompt = "";

      switch (action) {
        case "generate":
          prompt = `Generate a ${language} code snippet that does the following: ${currentValue}`;
          break;
        case "fix":
          prompt = `Fix the following ${language} code and explain what was wrong:\n\n${currentValue}`;
          break;
        case "explain":
          prompt = `Explain this ${language} code in detail:\n\n${currentValue}`;
          break;
        case "convert":
          prompt = `Convert this ${language} code to ${targetLanguage}:\n\n${currentValue}`;
          break;
        default:
          throw new Error("Unknown action");
      }

      // Using Groq API
      const response = await fetch(
        "https://api.groq.com/openai/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization:
              "Bearer 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",
          },
          body: JSON.stringify({
            model: "meta-llama/llama-4-scout-17b-16e-instruct",
            messages: [
              {
                role: "system",
                content: "You are a helpful code assistant.",
              },
              { role: "user", content: prompt },
            ],
          }),
        }
      );

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }

      const data = await response.json();
      const resultContent = data.choices[0].message.content.trim();
      setResult(resultContent);
    } catch (err) {
      console.error("API Error:", err);
      setError("Error processing request: " + err.message);

      let fallbackResponse = "";

      if (action === "generate") {
        fallbackResponse = `// Generated ${language} example (fallback mode)
// In a real application, this would be generated by the API
// with proper syntax and functionality for ${language}
// based on your request: ${
          snippetTextareaRef.current ? snippetTextareaRef.current.value : ""
        }`;
      } else if (action === "fix") {
        fallbackResponse = `// Fallback bug fix mode
// In a real application, the API would analyze and fix your ${language} code
// Please check your code for common issues or try again later.`;
      } else if (action === "explain") {
        fallbackResponse = `// Fallback explanation mode
// In a real application, the API would explain your ${language} code in detail
// including structure, logic, and suggestions for improvement.`;
      } else if (action === "convert") {
        fallbackResponse = `// Fallback conversion mode
// In a real application, the API would convert your ${language} code to ${targetLanguage}
// while maintaining the same functionality and following best practices.`;
      }

      setResult(fallbackResponse);
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(result);
    setCopySuccess(true);
    setTimeout(() => setCopySuccess(false), 2000);
  };

  const selectClass =
    "p-2 border-2 border-[#00ADB5] rounded-md shadow-sm focus:ring-[#00ADB5] focus:border-[#00ADB5] text-[#EEEEEE] bg-[#393E46]";
  const textareaClass =
    "p-2 border-2 border-[#00ADB5] rounded-md shadow-sm h-32 focus:ring-[#00ADB5] focus:border-[#00ADB5] text-[#EEEEEE] bg-[#393E46]";
  const buttonClass =
    "px-4 py-2 bg-[#00ADB5] text-[#EEEEEE] rounded-md hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-[#00ADB5] focus:ring-offset-2 focus:ring-offset-[#222831] disabled:opacity-50 flex items-center justify-center space-x-2";

  //snippet generation
  const SnippetGenerator = () => (
    <div className="space-y-4">
      <div className="flex items-center space-x-2">
        <Code className="text-[#EEEEEE]" size={24} />
        <h2 className="text-2xl font-semibold text-[#EEEEEE]">
          Code Snippet Generator
        </h2>
      </div>
      <p className="text-[#EEEEEE]">
        Generate code snippets in different languages
      </p>

      <div className="flex flex-col space-y-2">
        <label className="text-sm font-medium text-[#EEEEEE]">
          Select Language
        </label>
        <select
          value={language}
          onChange={(e) => setLanguage(e.target.value)}
          className={selectClass}
        >
          {languages.map((lang) => (
            <option
              key={lang}
              value={lang}
              className="text-[#EEEEEE] bg-[#393E46] border border-[#00ADB5]"
            >
              {lang}
            </option>
          ))}
        </select>
      </div>

      <div className="flex flex-col space-y-2">
        <label className="text-sm font-medium text-[#EEEEEE]">
          Describe what you need
        </label>
        <textarea
          ref={snippetTextareaRef}
          placeholder="Describe the code snippet you need..."
          className={textareaClass}
        />
      </div>

      <button
        onClick={() => processWithAPI("generate")}
        disabled={isLoading}
        className={buttonClass}
      >
        {isLoading ? (
          <>
            <Loader2 className="animate-spin" size={18} />
            <span>Generating...</span>
          </>
        ) : (
          <>
            <Code size={18} />
            <span>Generate Snippet</span>
          </>
        )}
      </button>
    </div>
  );

  //bug fixing
  const BugFixer = () => (
    <div className="space-y-4">
      <div className="flex items-center space-x-2">
        <FileX className="text-[#EEEEEE]" size={24} />
        <h2 className="text-2xl font-semibold text-[#EEEEEE]">
          Bug Fix Assistant
        </h2>
      </div>
      <p className="text-[#EEEEEE]">Paste your code with bugs and get fixes</p>

      <div className="flex flex-col space-y-2">
        <label className="text-sm font-medium text-[#EEEEEE]">
          Select Language
        </label>
        <select
          value={language}
          onChange={(e) => setLanguage(e.target.value)}
          className={selectClass}
        >
          {languages.map((lang) => (
            <option
              key={lang}
              value={lang}
              className="text-[#EEEEEE] bg-[#393E46]"
            >
              {lang}
            </option>
          ))}
        </select>
      </div>

      <div className="flex flex-col space-y-2">
        <label className="text-sm font-medium text-[#EEEEEE]">
          Code with bugs
        </label>
        <textarea
          ref={bugFixTextareaRef}
          placeholder="Paste your code with bugs here..."
          className={textareaClass}
        />
      </div>

      <button
        onClick={() => processWithAPI("fix")}
        disabled={isLoading}
        className={buttonClass}
      >
        {isLoading ? (
          <>
            <Loader2 className="animate-spin" size={18} />
            <span>Fixing...</span>
          </>
        ) : (
          <>
            <FileX size={18} />
            <span>Fix Bugs</span>
          </>
        )}
      </button>
    </div>
  );

  // code explanation
  const CodeExplainer = () => (
    <div className="space-y-4">
      <div className="flex items-center space-x-2">
        <FileText className="text-[#EEEEEE]" size={24} />
        <h2 className="text-2xl font-semibold text-[#EEEEEE]">
          Code Explanation
        </h2>
      </div>
      <p className="text-[#EEEEEE]">Get a detailed explanation of your code</p>

      <div className="flex flex-col space-y-2">
        <label className="text-sm font-medium text-[#EEEEEE]">
          Select Language
        </label>
        <select
          value={language}
          onChange={(e) => setLanguage(e.target.value)}
          className={selectClass}
        >
          {languages.map((lang) => (
            <option
              key={lang}
              value={lang}
              className="text-[#EEEEEE] bg-[#393E46]"
            >
              {lang}
            </option>
          ))}
        </select>
      </div>

      <div className="flex flex-col space-y-2">
        <label className="text-sm font-medium text-[#EEEEEE]">
          Code to explain
        </label>
        <textarea
          ref={explainTextareaRef}
          placeholder="Paste code you want explained..."
          className={textareaClass}
        />
      </div>

      <button
        onClick={() => processWithAPI("explain")}
        disabled={isLoading}
        className={buttonClass}
      >
        {isLoading ? (
          <>
            <Loader2 className="animate-spin" size={18} />
            <span>Analyzing...</span>
          </>
        ) : (
          <>
            <FileText size={18} />
            <span>Explain Code</span>
          </>
        )}
      </button>
    </div>
  );

  const CodeConverter = () => (
    <div className="space-y-4">
      <div className="flex items-center space-x-2">
        <ArrowRightLeft className="text-[#EEEEEE]" size={24} />
        <h2 className="text-2xl font-semibold text-[#EEEEEE]">
          Code Conversion Tool
        </h2>
      </div>
      <p className="text-[#EEEEEE]">Convert code between different languages</p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="flex flex-col space-y-2">
          <label className="text-sm font-medium text-[#EEEEEE]">
            Source Language
          </label>
          <select
            value={language}
            onChange={(e) => setLanguage(e.target.value)}
            className={selectClass}
          >
            {languages.map((lang) => (
              <option
                key={lang}
                value={lang}
                className="text-[#EEEEEE] bg-[#393E46]"
              >
                {lang}
              </option>
            ))}
          </select>
        </div>

        <div className="flex flex-col space-y-2">
          <label className="text-sm font-medium text-[#EEEEEE]">
            Target Language
          </label>
          <select
            value={targetLanguage}
            onChange={(e) => setTargetLanguage(e.target.value)}
            className={selectClass}
          >
            {languages.map((lang) => (
              <option
                key={lang}
                value={lang}
                className="text-[#EEEEEE] bg-[#393E46]"
              >
                {lang}
              </option>
            ))}
          </select>
        </div>
      </div>

      <div className="flex flex-col space-y-2">
        <label className="text-sm font-medium text-[#EEEEEE]">
          Code to convert
        </label>
        <textarea
          ref={convertTextareaRef}
          placeholder="Paste code you want to convert..."
          className={textareaClass}
        />
      </div>

      <button
        onClick={() => processWithAPI("convert")}
        disabled={isLoading}
        className={buttonClass}
      >
        {isLoading ? (
          <>
            <Loader2 className="animate-spin" size={18} />
            <span>Converting...</span>
          </>
        ) : (
          <>
            <ArrowRightLeft size={18} />
            <span>Convert Code</span>
          </>
        )}
      </button>
    </div>
  );

  const getEmptyStateContent = () => {
    switch (activeTab) {
      case "snippetGenerator":
        return {
          icon: <Code size={48} className="text-[#EEEEEE] opacity-70" />,
          title: "Code Snippet Generator",
          description:
            "Generate clean, functional code snippets in any programming language.",
        };
      case "bugFixer":
        return {
          icon: <FileX size={48} className="text-[#EEEEEE] opacity-70" />,
          title: "Fix Code Bugs",
          description:
            "Paste your buggy code and get quick, accurate fixes powered by AI.",
        };
      case "codeExplainer":
        return {
          icon: <FileText size={48} className="text-[#EEEEEE] opacity-70" />,
          title: "Explain Your Code",
          description:
            "Understand any piece of code with clear, detailed explanations.",
        };
      case "codeConverter":
        return {
          icon: (
            <ArrowRightLeft size={48} className="text-[#EEEEEE] opacity-70" />
          ),
          title: "Convert Between Languages",
          description:
            "Easily convert code between different programming languages.",
        };
      default:
        return {
          icon: <Code size={48} className="text-[#EEEEEE] opacity-70" />,
          title: "Code Assistant",
          description: "Fill out the form to get started",
        };
    }
  };

  const emptyState = getEmptyStateContent();

  return (
    <section
      id="demo-section"
      className="py-6 px-4 overflow-hidden bg-[#222831]"
    >
      <div className="max-w-6xl mx-auto">
        <h1 className="text-2xl md:text-3xl font-bold mb-6 text-[#EEEEEE]">
          Code Assistant Tools
        </h1>

        <div className="flex flex-wrap border-b border-[#393E46] mb-6">
          <button
            className={`py-2 px-4 font-medium flex items-center space-x-1 ${
              activeTab === "snippetGenerator"
                ? "text-[#00ADB5] border-b-2 border-[#00ADB5]"
                : "text-[#EEEEEE] hover:text-[#00ADB5]"
            }`}
            onClick={() => setActiveTab("snippetGenerator")}
          >
            <Code size={16} />
            <span>Snippet Generator</span>
          </button>
          <button
            className={`py-2 px-4 font-medium flex items-center space-x-1 ${
              activeTab === "bugFixer"
                ? "text-[#00ADB5] border-b-2 border-[#00ADB5]"
                : "text-[#EEEEEE] hover:text-[#00ADB5]"
            }`}
            onClick={() => setActiveTab("bugFixer")}
          >
            <FileX size={16} />
            <span>Bug Fixer</span>
          </button>
          <button
            className={`py-2 px-4 font-medium flex items-center space-x-1 ${
              activeTab === "codeExplainer"
                ? "text-[#00ADB5] border-b-2 border-[#00ADB5]"
                : "text-[#EEEEEE] hover:text-[#00ADB5]"
            }`}
            onClick={() => setActiveTab("codeExplainer")}
          >
            <FileText size={16} />
            <span>Code Explainer</span>
          </button>
          <button
            className={`py-2 px-4 font-medium flex items-center space-x-1 ${
              activeTab === "codeConverter"
                ? "text-[#00ADB5] border-b-2 border-[#00ADB5]"
                : "text-[#EEEEEE] hover:text-[#00ADB5]"
            }`}
            onClick={() => setActiveTab("codeConverter")}
          >
            <ArrowRightLeft size={16} />
            <span>Code Converter</span>
          </button>
        </div>

        <div className="flex flex-col lg:flex-row gap-6">
          {/* Left column: Input */}
          <div className="w-full lg:w-1/2">
            <div className="bg-[#393E46] p-6 border border-[#00ADB5] rounded-lg shadow-sm">
              {activeTab === "snippetGenerator" && <SnippetGenerator />}
              {activeTab === "bugFixer" && <BugFixer />}
              {activeTab === "codeExplainer" && <CodeExplainer />}
              {activeTab === "codeConverter" && <CodeConverter />}
            </div>
          </div>

          {/* Right column: Output */}
          <div className="w-full lg:w-1/2">
            <div className="bg-[#393E46] p-6 border border-[#00ADB5] rounded-lg shadow-sm h-full">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-medium text-[#EEEEEE]">Output</h3>
                {result && !isLoading && (
                  <button
                    onClick={copyToClipboard}
                    className="flex items-center space-x-1 text-sm text-[#EEEEEE] hover:text-[#00ADB5] transition-colors"
                  >
                    <Clipboard size={16} />
                    <span>{copySuccess ? "Copied!" : "Copy"}</span>
                  </button>
                )}
              </div>

              {isLoading && (
                <div className="flex flex-col items-center justify-center h-64">
                  <Loader2
                    size={48}
                    className="animate-spin text-[#00ADB5] mb-4"
                  />
                  <p className="text-[#EEEEEE]">Processing your request...</p>
                </div>
              )}

              {error && !isLoading && (
                <div className="text-red-300 bg-red-900 bg-opacity-40 p-4 rounded-md mb-3 border border-red-800">
                  <div className="font-medium mb-1">Error</div>
                  {error}
                </div>
              )}

              {result && !isLoading && (
                <div className="h-96 overflow-auto rounded-lg border-2 border-[#00ADB5]">
                  <pre className="bg-[#222831] text-[#EEEEEE] p-4 rounded-md overflow-x-auto h-full">
                    <code>{result}</code>
                  </pre>
                </div>
              )}

              {!result && !error && !isLoading && (
                <div className="flex flex-col items-center justify-center h-64 text-center border-2 border-dashed border-[#00ADB5] rounded-lg p-6">
                  {emptyState.icon}
                  <h4 className="text-lg font-medium text-[#EEEEEE] mt-4">
                    {emptyState.title}
                  </h4>
                  <p className="text-[#EEEEEE] opacity-80 mt-2 max-w-xs">
                    {emptyState.description}
                  </p>
                </div>
              )}

              {result && !isLoading && (
                <div className="mt-4">
                  <button
                    onClick={copyToClipboard}
                    className="px-4 py-2 bg-[#222831] text-[#EEEEEE] rounded-md hover:bg-[#00ADB5] focus:outline-none focus:ring-2 focus:ring-[#00ADB5] focus:ring-offset-2 focus:ring-offset-[#393E46] flex items-center space-x-2"
                  >
                    <Clipboard size={18} />
                    <span>
                      {copySuccess
                        ? "Copied to clipboard!"
                        : "Copy to clipboard"}
                    </span>
                  </button>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
