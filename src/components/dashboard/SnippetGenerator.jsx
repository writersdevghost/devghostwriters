import { useState, useRef } from "react";
import { Code, ArrowRight, Info } from "lucide-react";

export default function SnippetGenerator() {
  const [output, setOutput] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [showPopup, setShowPopup] = useState(false);

  const descriptionRef = useRef(null);

  const handleSubmit = async (prompt) => {
    setLoading(true);
    setError(null);
    descriptionRef.current = prompt;

    try {
      const apiPrompt = `Generate a code snippet that does the following: ${prompt}`;

      // Using Groq API
      const response = await fetch(
        "https://api.groq.com/openai/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization:
              "Bearer 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",
          },
          body: JSON.stringify({
            model: "meta-llama/llama-4-scout-17b-16e-instruct",
            messages: [
              {
                role: "system",
                content: "You are a helpful code assistant.",
              },
              { role: "user", content: apiPrompt },
            ],
          }),
        }
      );

      if (!response.ok) {
        throw new Error(`API request failed with status ${response.status}`);
      }

      const data = await response.json();
      const resultContent = data.choices[0].message.content.trim();
      setOutput(resultContent);

      const historyItem = {
        id: "hist-" + Date.now(),
        type: "snippet",
        title: createTitleFromPrompt(prompt),
        timestamp: new Date().toISOString(),
        content: resultContent,
      };

      let existingHistory = [];
      try {
        existingHistory = JSON.parse(
          localStorage.getItem("codeHistory") || "[]"
        );
      } catch (e) {
        console.error("Error parsing history from localStorage:", e);
      }

      const updatedHistory = [historyItem, ...existingHistory];

      localStorage.setItem("codeHistory", JSON.stringify(updatedHistory));

      window.dispatchEvent(new CustomEvent("historyUpdated"));
    } catch (err) {
      console.error("API Error:", err);
      setError("Error processing request: " + err.message);

      const fallbackResponse = `// Generated code example (fallback mode)
// In a real application, this would be generated by the API
// with proper syntax and functionality
// based on your request: ${prompt}`;

      setOutput(fallbackResponse);

      const historyItem = {
        id: "hist-" + Date.now(),
        type: "snippet",
        title: createTitleFromPrompt(prompt) + " (fallback)",
        timestamp: new Date().toISOString(),
        content: fallbackResponse,
      };

      try {
        let existingHistory = JSON.parse(
          localStorage.getItem("codeHistory") || "[]"
        );
        const updatedHistory = [historyItem, ...existingHistory];
        localStorage.setItem("codeHistory", JSON.stringify(updatedHistory));
        window.dispatchEvent(new CustomEvent("historyUpdated"));
      } catch (e) {
        console.error("Error saving fallback to history:", e);
      }
    } finally {
      setLoading(false);
    }
  };

  const createTitleFromPrompt = (prompt) => {
    const words = prompt.split(" ");
    const titleWords = words.slice(0, 5);
    let title = titleWords.join(" ");

    if (words.length > 5) {
      title += "...";
    }

    return title;
  };

  return (
    <div className="p-6">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold text-[#00ADB5] flex items-center">
          <Code className="mr-2 h-6 w-6" />
          Code Snippet Generator
        </h1>
        <button
          className="text-[#00ADB5] hover:text-[#00ADB5]/80"
          onClick={() => setShowPopup(true)}
        >
          <Info className="h-5 w-5" />
        </button>
      </div>

      {/* Info Popup */}
      {showPopup && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div className="bg-[#222831] border border-[#00ADB5]/30 rounded-lg p-6 max-w-lg mx-auto shadow-lg shadow-[#00ADB5]/20">
            <h3 className="text-xl font-bold text-[#00ADB5] mb-3 flex items-center">
              <Code className="mr-2 h-5 w-5" />
              Code Snippet Generator
            </h3>
            <p className="text-[#EEEEEE] mb-4">
              Need a quick code solution? Our AI-powered snippet generator
              creates functional, ready-to-use code snippets from your simple
              text descriptions. Whether you need to manipulate arrays, process
              data, or implement common functionality, just describe what you
              need in any programming language and get concise, efficient code
              in seconds.
            </p>
            <button
              className="w-full bg-[#00ADB5] hover:bg-[#00ADB5]/80 text-white py-2 rounded-md transition-colors"
              onClick={() => setShowPopup(false)}
            >
              Got it
            </button>
          </div>
        </div>
      )}

      <form
        onSubmit={(e) => {
          e.preventDefault();
          const promptEl = document.getElementById("code-prompt");
          if (promptEl && promptEl.value.trim()) {
            handleSubmit(promptEl.value);
          }
        }}
      >
        <div className="mb-4">
          <label className="block text-[#17696e] mb-2" htmlFor="code-prompt">
            Describe the code snippet you need
          </label>
          <textarea
            id="code-prompt"
            className="w-full bg-[#393E46] text-[#EEEEEE] border border-[#00ADB5]/30 rounded-md p-3 h-32 font-mono focus:outline-none focus:ring-2 focus:ring-[#00ADB5]/50"
            placeholder="Describe the code snippet you need..."
          ></textarea>
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-[#00ADB5] hover:bg-[#00ADB5]/80 disabled:bg-[#00ADB5]/50 text-white py-3 rounded-md flex items-center justify-center transition-colors"
        >
          {loading ? (
            <div className="animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full"></div>
          ) : (
            <>
              Generate Snippet <Code className="ml-2 h-4 w-4" />
            </>
          )}
        </button>
      </form>

      {error && (
        <div className="mt-4 text-red-500 bg-red-100/10 p-4 rounded-md border border-red-500/30">
          <div className="font-medium mb-1">Error</div>
          {error}
        </div>
      )}

      {loading && (
        <div className="mt-8 flex flex-col items-center justify-center p-10">
          <div className="animate-spin h-10 w-10 border-4 border-[#00ADB5] border-t-transparent rounded-full"></div>
          <p className="mt-4 text-[#EEEEEE]">Generating your code snippet...</p>
        </div>
      )}

      {output && !loading && (
        <div className="mt-8">
          <h2 className="text-xl font-bold text-[#00ADB5] mb-4">
            Generated Code Snippet
          </h2>
          <div className="bg-[#2D333B] border border-[#00ADB5]/30 rounded-md p-4 text-[#EEEEEE] whitespace-pre-wrap font-mono overflow-x-auto">
            {output}
          </div>
          <div className="mt-4 flex justify-end">
            <button
              onClick={() => {
                navigator.clipboard.writeText(output);
              }}
              className="bg-[#393E46] hover:bg-[#393E46]/80 text-[#EEEEEE] px-4 py-2 rounded-md transition-colors"
            >
              Copy to Clipboard
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
